apply plugin: 'jacoco'

jacoco {
    toolVersion = "$jacoco_version"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type ->
        type.name
    }
    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }
    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')
    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName
            def kotlinClassPath

            if (!productFlavorName) {
                sourceName = "${buildTypeName}"
                kotlinClassPath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                kotlinClassPath = "${productFlavorName}${buildTypeName.capitalize()}"
            }

            def testTaskName = "test${sourceName.capitalize()}UnitTest"
            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            def testReportTaskSuffix = "JacocoTestReport"

            def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
            def javaClasses = fileTree(dir: "$project.buildDir/intermediates/classes/${productFlavorName}/debug", excludes: fileFilter)
            def kotlinClasses = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/${kotlinClassPath}", excludes: fileFilter)
            def javaSrc = "$project.projectDir/src/main/java"
            def kotlinSrc = "$project.projectDir/src/main/kotlin"

            task "${testTaskName}${testReportTaskSuffix}${project.name.capitalize()}"(type: JacocoReport, dependsOn: ["$testTaskName", "create${sourceName.capitalize()}CoverageReport"]) {

                reports {
                    xml.enabled = true
                    html.enabled = true
                }

                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                sourceDirectories = files([javaSrc, kotlinSrc])
                classDirectories = files([javaClasses, kotlinClasses])
                executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")

            }

            task "jacocoTestCoverageVerification${sourceName.capitalize()}${project.name.capitalize()}"(type: JacocoCoverageVerification, dependsOn: "${testTaskName}${testReportTaskSuffix}${project.name.capitalize()}") {
                description = "Verifies Code Coverage"

                sourceDirectories = files([javaSrc, kotlinSrc])
                classDirectories = files([javaClasses, kotlinClasses])
                executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")

                violationRules {
                    setFailOnViolation(true)
                    rule {
                        limit {
                            minimum = 0.0
                        }
                    }
                }
            }
        }
    }
}

